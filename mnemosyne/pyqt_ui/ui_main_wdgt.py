# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_wdgt.ui'
#
# Created by: PyQt5 UI code generator 5.7.1
#
# WARNING! All changes made in this file will be lost!

from mnemosyne.libmnemosyne.translator import _
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWdgt(object):
    def setupUi(self, MainWdgt):
        MainWdgt.setObjectName("MainWdgt")
        MainWdgt.resize(315, 494)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWdgt.sizePolicy().hasHeightForWidth())
        MainWdgt.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/mnemosyne.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWdgt.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWdgt)
        self.centralwidget.setObjectName("centralwidget")
        MainWdgt.setCentralWidget(self.centralwidget)
        self.menu_bar = QtWidgets.QMenuBar(MainWdgt)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 315, 21))
        self.menu_bar.setObjectName("menu_bar")
        self.menu_Settings = QtWidgets.QMenu(self.menu_bar)
        self.menu_Settings.setObjectName("menu_Settings")
        self.menu_Help = QtWidgets.QMenu(self.menu_bar)
        self.menu_Help.setObjectName("menu_Help")
        self.menuFile = QtWidgets.QMenu(self.menu_bar)
        self.menuFile.setObjectName("menuFile")
        self.menu_Cards = QtWidgets.QMenu(self.menu_bar)
        self.menu_Cards.setObjectName("menu_Cards")
        MainWdgt.setMenuBar(self.menu_bar)
        self.status_bar = QtWidgets.QStatusBar(MainWdgt)
        self.status_bar.setObjectName("status_bar")
        MainWdgt.setStatusBar(self.status_bar)
        self.tool_bar = QtWidgets.QToolBar(MainWdgt)
        self.tool_bar.setMovable(False)
        self.tool_bar.setIconSize(QtCore.QSize(22, 22))
        self.tool_bar.setFloatable(False)
        self.tool_bar.setObjectName("tool_bar")
        MainWdgt.addToolBar(QtCore.Qt.TopToolBarArea, self.tool_bar)
        self.actionActivateCards = QtWidgets.QAction(MainWdgt)
        self.actionActivateCards.setObjectName("actionActivateCards")
        self.actionAddCards = QtWidgets.QAction(MainWdgt)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddCards.setIcon(icon1)
        self.actionAddCards.setObjectName("actionAddCards")
        self.actionConfigure = QtWidgets.QAction(MainWdgt)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/configure.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionConfigure.setIcon(icon2)
        self.actionConfigure.setObjectName("actionConfigure")
        self.actionDeleteCurrentCard = QtWidgets.QAction(MainWdgt)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDeleteCurrentCard.setIcon(icon3)
        self.actionDeleteCurrentCard.setObjectName("actionDeleteCurrentCard")
        self.actionEditCurrentCard = QtWidgets.QAction(MainWdgt)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/edit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEditCurrentCard.setIcon(icon4)
        self.actionEditCurrentCard.setObjectName("actionEditCurrentCard")
        self.actionBrowseCards = QtWidgets.QAction(MainWdgt)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/cards.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionBrowseCards.setIcon(icon5)
        self.actionBrowseCards.setObjectName("actionBrowseCards")
        self.actionExport = QtWidgets.QAction(MainWdgt)
        self.actionExport.setObjectName("actionExport")
        self.actionFileExit = QtWidgets.QAction(MainWdgt)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFileExit.setIcon(icon6)
        self.actionFileExit.setObjectName("actionFileExit")
        self.actionFileNew = QtWidgets.QAction(MainWdgt)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("../../pixmaps/filenew.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFileNew.setIcon(icon7)
        self.actionFileNew.setObjectName("actionFileNew")
        self.actionFileOpen = QtWidgets.QAction(MainWdgt)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/fileopen.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFileOpen.setIcon(icon8)
        self.actionFileOpen.setObjectName("actionFileOpen")
        self.actionFileSave = QtWidgets.QAction(MainWdgt)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/filesave.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFileSave.setIcon(icon9)
        self.actionFileSave.setObjectName("actionFileSave")
        self.actionFileSaveAs = QtWidgets.QAction(MainWdgt)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/filesaveas.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFileSaveAs.setIcon(icon10)
        self.actionFileSaveAs.setObjectName("actionFileSaveAs")
        self.actionAbout = QtWidgets.QAction(MainWdgt)
        self.actionAbout.setObjectName("actionAbout")
        self.actionImport = QtWidgets.QAction(MainWdgt)
        self.actionImport.setObjectName("actionImport")
        self.actionGettingStarted = QtWidgets.QAction(MainWdgt)
        self.actionGettingStarted.setObjectName("actionGettingStarted")
        self.actionShowStatistics = QtWidgets.QAction(MainWdgt)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/mnemosyne/pixmaps/statistics.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowStatistics.setIcon(icon11)
        self.actionShowStatistics.setObjectName("actionShowStatistics")
        self.actionTip = QtWidgets.QAction(MainWdgt)
        self.actionTip.setObjectName("actionTip")
        self.actionManagePlugins = QtWidgets.QAction(MainWdgt)
        self.actionManagePlugins.setObjectName("actionManagePlugins")
        self.actionManageTypes = QtWidgets.QAction(MainWdgt)
        self.actionManageTypes.setObjectName("actionManageTypes")
        self.actionSync = QtWidgets.QAction(MainWdgt)
        self.actionSync.setObjectName("actionSync")
        self.actionCompact = QtWidgets.QAction(MainWdgt)
        self.actionCompact.setObjectName("actionCompact")
        self.actionFindDuplicates = QtWidgets.QAction(MainWdgt)
        self.actionFindDuplicates.setObjectName("actionFindDuplicates")
        self.menu_Settings.addAction(self.actionConfigure)
        self.menu_Settings.addAction(self.actionManagePlugins)
        self.menu_Help.addAction(self.actionGettingStarted)
        self.menu_Help.addAction(self.actionTip)
        self.menu_Help.addSeparator()
        self.menu_Help.addAction(self.actionAbout)
        self.menuFile.addAction(self.actionFileNew)
        self.menuFile.addAction(self.actionFileOpen)
        self.menuFile.addAction(self.actionFileSave)
        self.menuFile.addAction(self.actionFileSaveAs)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionImport)
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addAction(self.actionSync)
        self.menuFile.addAction(self.actionCompact)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionFileExit)
        self.menu_Cards.addAction(self.actionAddCards)
        self.menu_Cards.addAction(self.actionEditCurrentCard)
        self.menu_Cards.addAction(self.actionDeleteCurrentCard)
        self.menu_Cards.addSeparator()
        self.menu_Cards.addAction(self.actionBrowseCards)
        self.menu_Cards.addAction(self.actionActivateCards)
        self.menu_Cards.addAction(self.actionFindDuplicates)
        self.menu_Cards.addAction(self.actionManageTypes)
        self.menu_Cards.addSeparator()
        self.menu_Cards.addAction(self.actionShowStatistics)
        self.menu_bar.addAction(self.menuFile.menuAction())
        self.menu_bar.addAction(self.menu_Cards.menuAction())
        self.menu_bar.addAction(self.menu_Settings.menuAction())
        self.menu_bar.addAction(self.menu_Help.menuAction())
        self.tool_bar.addAction(self.actionAddCards)
        self.tool_bar.addAction(self.actionEditCurrentCard)
        self.tool_bar.addAction(self.actionDeleteCurrentCard)
        self.tool_bar.addAction(self.actionBrowseCards)
        self.tool_bar.addAction(self.actionShowStatistics)

        self.retranslateUi(MainWdgt)
        self.actionAddCards.triggered.connect(MainWdgt.add_cards)
        self.actionFileNew.triggered.connect(MainWdgt.file_new)
        self.actionFileOpen.triggered.connect(MainWdgt.file_open)
        self.actionFileSave.triggered.connect(MainWdgt.file_save)
        self.actionFileSaveAs.triggered.connect(MainWdgt.file_save_as)
        self.actionFileExit.triggered.connect(MainWdgt.close)
        self.actionEditCurrentCard.triggered.connect(MainWdgt.edit_current_card)
        self.actionDeleteCurrentCard.triggered.connect(MainWdgt.delete_current_card)
        self.actionManagePlugins.triggered.connect(MainWdgt.manage_plugins)
        self.actionManageTypes.triggered.connect(MainWdgt.manage_card_types)
        self.actionShowStatistics.triggered.connect(MainWdgt.show_statistics)
        self.actionImport.triggered.connect(MainWdgt.import_file)
        self.actionExport.triggered.connect(MainWdgt.export_file)
        self.actionConfigure.triggered.connect(MainWdgt.configure)
        self.actionActivateCards.triggered.connect(MainWdgt.activate_cards)
        self.actionSync.triggered.connect(MainWdgt.sync)
        self.actionBrowseCards.triggered.connect(MainWdgt.browse_cards)
        self.actionTip.triggered.connect(MainWdgt.show_tip)
        self.actionGettingStarted.triggered.connect(MainWdgt.show_getting_started)
        self.actionAbout.triggered.connect(MainWdgt.show_about)
        self.actionCompact.triggered.connect(MainWdgt.compact_database)
        self.actionFindDuplicates.triggered.connect(MainWdgt.find_duplicates)
        QtCore.QMetaObject.connectSlotsByName(MainWdgt)

    def retranslateUi(self, MainWdgt):
        _translate = QtCore.QCoreApplication.translate
        self.menu_Settings.setTitle(_('&Settings'))
        self.menu_Help.setTitle(_('&Help'))
        self.menuFile.setTitle(_('&File'))
        self.menu_Cards.setTitle(_('&Cards'))
        self.tool_bar.setWindowTitle(_('toolBar'))
        self.actionActivateCards.setText(_('(De)a&ctivate cards...'))
        self.actionActivateCards.setShortcut(_('Ctrl+D'))
        self.actionAddCards.setText(_('&Add cards...'))
        self.actionAddCards.setShortcut(_('Ctrl+A'))
        self.actionConfigure.setText(_('&Configure Mnemosyne...'))
        self.actionDeleteCurrentCard.setText(_('&Delete current card'))
        self.actionDeleteCurrentCard.setShortcut(_('Del'))
        self.actionEditCurrentCard.setText(_('&Edit current card...'))
        self.actionEditCurrentCard.setShortcut(_('Ctrl+E'))
        self.actionBrowseCards.setText(_('&Browse cards...'))
        self.actionBrowseCards.setShortcut(_('Ctrl+B'))
        self.actionExport.setText(_('&Export...'))
        self.actionFileExit.setText(_('E&xit'))
        self.actionFileNew.setText(_('&New...'))
        self.actionFileNew.setShortcut(_('Ctrl+N'))
        self.actionFileOpen.setText(_('&Open...'))
        self.actionFileOpen.setShortcut(_('Ctrl+O'))
        self.actionFileSave.setText(_('&Save'))
        self.actionFileSave.setShortcut(_('Ctrl+S'))
        self.actionFileSaveAs.setText(_('Save &as...'))
        self.actionAbout.setText(_('&About'))
        self.actionImport.setText(_('&Import...'))
        self.actionGettingStarted.setText(_('&Getting started'))
        self.actionShowStatistics.setText(_('Show s&tatistics...'))
        self.actionShowStatistics.setShortcut(_('Ctrl+T'))
        self.actionTip.setText(_('&Tip of the day'))
        self.actionManagePlugins.setText(_('Manage &plugins...'))
        self.actionManagePlugins.setToolTip(_('Manage plugins'))
        self.actionManageTypes.setText(_('&Manage card types...'))
        self.actionSync.setText(_('S&ync...'))
        self.actionSync.setShortcut(_('Ctrl+Y'))
        self.actionCompact.setText(_('Compact...'))
        self.actionCompact.setToolTip(_('Compact database'))
        self.actionFindDuplicates.setText(_('Find duplicate questions'))

from . import mnemosyne_rc
