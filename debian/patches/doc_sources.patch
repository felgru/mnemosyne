Description: Patch in doc sources from upstream
   [ Scott Kitterman ]
   * Add doc sources from upstream bzr to avoid sourceless javascript and
     rebuild docs using sphinx
Author: Scott Kitterman <scott@kitterman.com>
Origin: upstream
Forwarded: not-needed

--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/Makefile
@@ -0,0 +1,70 @@
+# Makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line.
+SPHINXOPTS    =
+SPHINXBUILD   = sphinx-build
+PAPER         =
+
+# Internal variables.
+PAPEROPT_a4     = -D latex_paper_size=a4
+PAPEROPT_letter = -D latex_paper_size=letter
+ALLSPHINXOPTS   = -d build/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) source
+
+.PHONY: help clean html web pickle htmlhelp latex changes linkcheck
+
+help:
+	@echo "Please use \`make <target>' where <target> is one of"
+	@echo "  html      to make standalone HTML files"
+	@echo "  pickle    to make pickle files (usable by e.g. sphinx-web)"
+	@echo "  htmlhelp  to make HTML files and a HTML help project"
+	@echo "  latex     to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
+	@echo "  changes   to make an overview over all changed/added/deprecated items"
+	@echo "  linkcheck to check all external links for integrity"
+
+clean:
+	-rm -rf build/*
+
+html:
+	mkdir -p build/html build/doctrees
+	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) build/html
+	@echo
+	@echo "Build finished. The HTML pages are in build/html."
+
+pickle:
+	mkdir -p build/pickle build/doctrees
+	$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) build/pickle
+	@echo
+	@echo "Build finished; now you can process the pickle files or run"
+	@echo "  sphinx-web build/pickle"
+	@echo "to start the sphinx-web server."
+
+web: pickle
+
+htmlhelp:
+	mkdir -p build/htmlhelp build/doctrees
+	$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) build/htmlhelp
+	@echo
+	@echo "Build finished; now you can run HTML Help Workshop with the" \
+	      ".hhp project file in build/htmlhelp."
+
+latex:
+	mkdir -p build/latex build/doctrees
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) build/latex
+	@echo
+	@echo "Build finished; the LaTeX files are in build/latex."
+	@echo "Run \`make all-pdf' or \`make all-ps' in that directory to" \
+	      "run these through (pdf)latex."
+
+changes:
+	mkdir -p build/changes build/doctrees
+	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) build/changes
+	@echo
+	@echo "The overview file is in build/changes."
+
+linkcheck:
+	mkdir -p build/linkcheck build/doctrees
+	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) build/linkcheck
+	@echo
+	@echo "Link check complete; look for any errors in the above output " \
+	      "or in build/linkcheck/output.txt."
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/conf.py
@@ -0,0 +1,181 @@
+# -*- coding: utf-8 -*-
+#
+# libmnemosyne documentation build configuration file, created by
+# sphinx-quickstart on Sat Aug  9 10:59:10 2008.
+#
+# This file is execfile()d with the current directory set to its containing dir.
+#
+# The contents of this file are pickled, so don't put values in the namespace
+# that aren't pickleable (module imports are okay, they're removed automatically).
+#
+# All configuration values have a default value; values that are commented out
+# serve to show the default value.
+
+import sys, os
+
+# If your extensions are in another directory, add it here. If the directory
+# is relative to the documentation root, use os.path.abspath to make it
+# absolute, like shown here.
+
+sys.path.insert(0,os.path.abspath("./../../../.."))
+
+
+# General configuration
+# ---------------------
+
+# Add any Sphinx extension module names here, as strings. They can be extensions
+# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest']
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# The suffix of source filenames.
+source_suffix = '.rst'
+
+# The master toctree document.
+master_doc = 'index'
+
+# General substitutions.
+project = 'libmnemosyne'
+copyright = '2008, Peter Bienstman'
+
+# The default replacements for |version| and |release|, also used in various
+# other places throughout the built documents.
+#
+# The short X.Y version.
+version = '2.0'
+# The full version, including alpha/beta/rc tags.
+release = '2.0'
+
+# There are two options for replacing |today|: either, you set today to some
+# non-false value, then it is used:
+#today = ''
+# Else, today_fmt is used as the format for a strftime call.
+today_fmt = '%B %d, %Y'
+
+# List of documents that shouldn't be included in the build.
+#unused_docs = []
+
+# List of directories, relative to source directories, that shouldn't be searched
+# for source files.
+#exclude_dirs = []
+
+# The reST default role (used for this markup: `text`) to use for all documents.
+#default_role = None
+
+# If true, '()' will be appended to :func: etc. cross-reference text.
+#add_function_parentheses = True
+
+# If true, the current module name will be prepended to all description
+# unit titles (such as .. function::).
+#add_module_names = True
+
+# If true, sectionauthor and moduleauthor directives will be shown in the
+# output. They are ignored by default.
+#show_authors = False
+
+# The name of the Pygments (syntax highlighting) style to use.
+pygments_style = 'sphinx'
+
+
+# Options for HTML output
+# -----------------------
+
+# The style sheet to use for HTML and HTML Help pages. A file of that name
+# must exist either in Sphinx' static/ path, or in one of the custom paths
+# given in html_static_path.
+html_style = 'default.css'
+
+# The name for this set of Sphinx documents.  If None, it defaults to
+# "<project> v<release> documentation".
+#html_title = None
+
+# A shorter title for the navigation bar.  Default is the same as html_title.
+#html_short_title = None
+
+# The name of an image file (within the static path) to place at the top of
+# the sidebar.
+#html_logo = None
+
+# The name of an image file (within the static path) to use as favicon of the
+# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
+# pixels large.
+#html_favicon = None
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
+# using the given strftime format.
+html_last_updated_fmt = '%b %d, %Y'
+
+# If true, SmartyPants will be used to convert quotes and dashes to
+# typographically correct entities.
+#html_use_smartypants = True
+
+# Custom sidebar templates, maps document names to template names.
+#html_sidebars = {}
+
+# Additional templates that should be rendered to pages, maps page names to
+# template names.
+#html_additional_pages = {}
+
+# If false, no module index is generated.
+#html_use_modindex = True
+
+# If false, no index is generated.
+#html_use_index = True
+
+# If true, the index is split into individual pages for each letter.
+#html_split_index = False
+
+# If true, the reST sources are included in the HTML build as _sources/<name>.
+#html_copy_source = True
+
+# If true, an OpenSearch description file will be output, and all pages will
+# contain a <link> tag referring to it.  The value of this option must be the
+# base URL from which the finished HTML is served.
+#html_use_opensearch = ''
+
+# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
+#html_file_suffix = ''
+
+# Output file base name for HTML help builder.
+htmlhelp_basename = 'libmnemosynedoc'
+
+
+# Options for LaTeX output
+# ------------------------
+
+# The paper size ('letter' or 'a4').
+#latex_paper_size = 'letter'
+
+# The font size ('10pt', '11pt' or '12pt').
+#latex_font_size = '10pt'
+
+# Grouping the document tree into LaTeX files. List of tuples
+# (source start file, target name, title, author, document class [howto/manual]).
+latex_documents = [
+  ('index', 'libmnemosyne.tex', 'libmnemosyne Documentation',
+   'Peter Bienstman', 'manual'),
+]
+
+# The name of an image file (relative to this directory) to place at the top of
+# the title page.
+#latex_logo = None
+
+# For "manual" documents, if this is true, then toplevel headings are parts,
+# not chapters.
+#latex_use_parts = False
+
+# Additional stuff for the LaTeX preamble.
+#latex_preamble = ''
+
+# Documents to append as an appendix to all manuals.
+#latex_appendices = []
+
+# If false, no module index is generated.
+#latex_use_modindex = True
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/index.rst
@@ -0,0 +1,101 @@
+.. libmnemosyne documentation master file, created by sphinx-quickstart on Sat Aug  9 10:59:10 2008.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Libmnemosyne overview
+==============================
+
+Libmnemosyne consists of a number of components, which can be swapped in and
+out. This is handled by the ComponentManager. Examples of components are the
+scheduler, the storage layer, card types, plugins, ...
+
+The basic unit of information from which Cards are derived is called a Fact,
+containing a set of fields and their associated values. E.g., for a three-sided 
+CardType, these fields are foreign word, pronunciation and translation.
+
+A FactView collects a number of the fields of a Fact into question and answers.
+E.g., the three-sided CardType has a recognition FactView, where the question
+contains the foreign word, and the answer contains the pronunciation and the 
+translation.
+
+As mentioned before, a Fact is linked to a CardType, and each CardType lists
+a set of FactViews.
+
+The actual Cards are generated from the data in Fact using the recipe of a
+certain FactView. A Card also contains all the repetition data needed for the
+Scheduler to do its work. Since the question and answers are generated from
+the Fact data each time a Card is shown, related Cards (i.e. Cards with
+different FactViews of the same Fact) are always consistent.
+
+The actual displaying of the data in a Card is handled by a RenderChain, which
+details the operations needed to get from the raw data in a Card to a 
+representation of its question and answer, in a form either suitable for 
+displaying in a browser, or exporting to a text file, ... . First the raw data
+is sent through Filters, which perform operations which can be useful for many
+card types, like expanding relative paths. Then this data is assembled in the 
+right order in a Renderer, which can be card type specific.
+
+At several points in the program, plugin writers can hook in their code using
+the Hook mechanism.
+
+Before the data is passed to the Renderer, Filters can be applied to it. This
+is an extra level of flexibility, and can be used to generate LaTeX, convert
+relative paths to absolute paths, etc ...
+
+To determine which cards are active (i.e.) participate in the review process,
+a mechanism of ActivityCriterion and CriterionApplier is used.
+
+In order to make it easier for other GUI frontends to be written, all the logic
+typically needed for GUIs, but that is independent of the actual GUI toolkit
+used, is abstracted in controllers. In order to get more flexibility, there 
+are two of them: one related to the review process (which is different for 
+different schedulers), and one related to the rest of the program (which 
+normally won't change).
+
+There is also mechanism for plugins to add new statistical data to the standard
+statistics in an integrated way.
+
+
+Contents
+========
+
+.. toctree::
+    :maxdepth: 2
+
+    modules/component    
+    modules/component_manager
+    modules/fact
+    modules/fact_view
+    modules/tag
+    modules/tag_tree
+    modules/card_type
+    modules/card
+    modules/card_type_converter    
+    modules/render_chain
+    modules/filter
+    modules/renderer
+    modules/controller
+    modules/review_controller
+    modules/configuration
+    modules/database
+    modules/file_format
+    modules/hook
+    modules/log_uploader
+    modules/logger
+    modules/plugin
+    modules/scheduler
+    modules/stopwatch
+    modules/statistics_page
+    modules/criterion
+
+    modules/how_to_write_a_new_frontend
+    
+     
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/card.rst
@@ -0,0 +1,9 @@
+:mod:`Card`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.card
+   
+.. autoclass:: Card
+   :members:
+   :undoc-members:   
+   :inherited-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/card_type.rst
@@ -0,0 +1,9 @@
+:mod:`CardType`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.card_type
+   
+.. autoclass:: CardType
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/card_type_converter.rst
@@ -0,0 +1,9 @@
+:mod:`CardTypeConverter`
+========================
+
+.. automodule:: mnemosyne.libmnemosyne.card_type_converter
+
+.. autoclass:: CardTypeConverter
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/component.rst
@@ -0,0 +1,9 @@
+:mod:`Component`
+======================
+
+.. automodule:: mnemosyne.libmnemosyne.component
+
+.. autoclass:: Component
+   :members:
+   :undoc-members:   
+   :inherited-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/component_manager.rst
@@ -0,0 +1,9 @@
+:mod:`ComponentManager`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.component_manager
+   
+.. autoclass:: ComponentManager
+   :members:
+   :undoc-members:   
+   :inherited-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/configuration.rst
@@ -0,0 +1,9 @@
+:mod:`Configuration`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.configuration
+   
+.. autoclass:: Configuration
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/controller.rst
@@ -0,0 +1,9 @@
+:mod:`Controller`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.controller
+   
+.. autoclass:: Controller
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/criterion.rst
@@ -0,0 +1,13 @@
+:mod:`Criterion`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.criterion
+   
+.. autoclass:: Criterion
+   :members:
+   :undoc-members:   
+
+.. autoclass:: CriterionApplier
+   :members:
+   :undoc-members:
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/database.rst
@@ -0,0 +1,9 @@
+:mod:`Database`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.database
+   
+.. autoclass:: Database
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/fact.rst
@@ -0,0 +1,9 @@
+:mod:`Fact`
+===========
+
+.. automodule:: mnemosyne.libmnemosyne.fact
+
+.. autoclass:: Fact
+   :members:
+   :undoc-members:   
+   :inherited-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/fact_view.rst
@@ -0,0 +1,9 @@
+:mod:`FactView`
+======================
+
+.. automodule:: mnemosyne.libmnemosyne.fact_view
+
+.. autoclass:: FactView
+   :members:
+   :undoc-members:   
+   :inherited-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/file_format.rst
@@ -0,0 +1,9 @@
+:mod:`FileFormat`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.file_format
+   
+.. autoclass:: FileFormat
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/filter.rst
@@ -0,0 +1,9 @@
+:mod:`Filter`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.filter
+   
+.. autoclass:: Filter
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/hook.rst
@@ -0,0 +1,9 @@
+:mod:`Hook`
+==============
+
+.. automodule:: mnemosyne.libmnemosyne.hook
+   
+.. autoclass:: Hook
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/how_to_write_a_new_frontend.rst
@@ -0,0 +1,84 @@
+How to write a new frontend
+===========================
+
+libmnemosyne is designed in such a way that writing a new front is as painless as possible. All the code for running a GUI which is actually GUI toolkit independent is grouped in two controllers: the main ui controller and the review ui controller. In order to build a new frontend, you need to create a main widget which inherits from ``MainWidget`` and implements its interface, and similarly a review widget which inherits from ``ReviewWidget``.
+
+In order to get a feel for how this works, it's best by starting to study the code for the ppygui_ui Windows Mobile client, which is the simplest possible frontend, as it only supports reviewing cards.
+
+There are three files in that frontend:
+
+* a startup script, which specifies which components your frontend wants to activate in libmnemosyne, whether you are running on a device which is resource limited, ... .
+
+* a main widget, which corresponds to the application level widget in the GUI toolkit, and is in charge of showing error dialogs, displaying menus.
+
+* the review widget, where you need to implement a.o. the code to display text in the question window, ... .
+
+
+To give a better feeling for how the division of labour between your own new GUI code and the GUI independent code in the controllers works, consider this example from the 'add cards' functionality in the PyQt frontend.
+
+When the user activates the menu option or icon to add cards, it will fire up a certain function, which in the PyQt frontend is called ``add_cards()``::
+
+    QObject.connect(self.actionAddCards, SIGNAL("activated()"), MainWindow.add_cards)
+
+The implementation of this function is rather trivial, it just calls the controller::
+
+    def add_cards(self):
+        self.controller().show_add_cards_dialog()
+
+The code above is code you need to implement for your new frontend, but as you can see, it's rather trivial.
+
+The controller's ``show_add_cards_dialog`` function looks like this::
+
+    def show_add_cards_dialog(self):
+        self.stopwatch().pause()
+        self.component_manager.get_current("add_cards_dialog")\
+            (self.component_manager).activate()
+        review_controller = self.review_controller()
+        review_controller.reload_counters()
+        if review_controller.card is None:
+            review_controller.new_question()
+        else:
+            review_controller.update_status_bar()
+        self.stopwatch().unpause()
+
+This is where the heavy lifting is done, but it's completely UI independent, and there should be no need for you to modify that code.
+
+In order for the controller to know where it can find the actual add cards dialog, which for PyQt is called ``AddCardsDlg`` , you need to have that dialog derive from the abstract ``libmnemosyne.ui_components.dialogs.AddCardsDialog``, and provide an activate function, which for the PyQt toolkit is simply::
+
+    def activate(self):
+        self.exec_()
+
+Finally, you need to register the ``AddCardsDlg`` component. That is what the following line does inside the main startup script (which for PyQt is simply called ``mnemosyne``)::
+
+    mnemosyne.components.append(("mnemosyne.pyqt_ui.add_cards_dlg",
+                                 "AddCardsDlg"))
+
+Inside the ``AddCardsDlg``, there is of course lots of UI specific code, but once the dialog has enough data to create the cards, it simply calls::
+
+    self.controller().create_new_cards(fact_data, card_type, grade, tag_names)
+
+So, the ``AddCardsDlg`` should almost entirely consist of GUI dependent code. All the GUI indepedent code to actually create the cards is contained within the controller's ``create_new_cards()`` method.
+
+If you feel like you need to override the review or the main controller provided by libmnemosyne, please let the developpers know. Either its design is not general enough, or you are trying to work against libmnemosyne rather than with it.
+
+Tips for creating a responsive client:
+
+* When instantiating a ``libmnemosyne.Mnemosyne`` object, there are two parameters you need to provide: ``upload_science_logs`` and ``interested_in_old_reps``. If you are writing a mobile client which syncs to a desktop version of mnemosyne, it is recommended that you don't deal with uploading the science logs yourself, but let the desktop client deal with that. As for ``interested_in_old_reps``, if your mobile client does not include graphical statistics using the revision history, it does not make sense to store this history on your device.
+* The standard instantiation of a ``libmnemosyne.Mnemosyne`` object includes all components in libmnemosyne. If you are writing a mobile client with e.g. only review capabilities, it does not make sense to include all these components. See the example of the Windows Mobile ppygui_ui frontend for a client which only uses the bare minimum of components to improve startup time.
+* If your mobile client does not include a card browser, you can save some disk space by not storing pregenerated questions or answers. To achieve this, make sure you do not include the regular ``SQLite`` component, but this one::
+
+    ("mnemosyne.libmnemosyne.databases.SQLite_no_pregenerated_data",
+     "SQLite_NoPregeneratedData")
+
+* libmnemosyne does some optimisation by trying to show the next question before the grading of the previous question is completed. This improves the perceived responsiveness of the client. However, some GUI toolkits (e.g. Qt) queue widget updates and only excecute them when there is no more processing going on, thereby defeating libmnemosyne's optimisation. For that reason, there is a function ``review_widget().redraw_now`` which is used to tell the GUI toolkit to do the repaint now. If your toolkit also has similar behaviour, implementing this function can really help to mask slow database access.
+* If save operations are slow on your mobile device, you might want to consider setting a larger default value instead of ``save_after_n_reps = 1`` in ``config.py``.
+* If media files will never be edited outside of Mnemosyne on your mobile device, you can save time during sync by setting ``check_for_updated_media_files = False`` in ``config.py``.
+* If you are really adventurous, you can set ``backup_before_sync = True`` in ``config.py``.
+
+
+
+Notes:
+
+* If you need access to the main widget when you are constructing the review widget, e.g. to specify it's parent, you can access it using `self.main_widget()``
+* If you need access to some components of libmnemosyne to construct your widget (e.g. the configuration), these might not yet be available inside your ``__init__()`` method. In this case, you need to move that code to your widget's ``activate()`` method, at which time all the other compoments will already be active.
+* Everything described here applies not only for Python frontends, but also for frontends not written in Python, which access libmnemosyne through an UDP socket or through the Python-embedded-in-C bridge.
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/log_uploader.rst
@@ -0,0 +1,9 @@
+:mod:`LogUploader`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.log_uploader
+   
+.. autoclass:: LogUploader
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/logger.rst
@@ -0,0 +1,9 @@
+:mod:`Logger`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.logger
+   
+.. autoclass:: Logger
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/plugin.rst
@@ -0,0 +1,9 @@
+:mod:`Plugin`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.plugin
+   
+.. autoclass:: Plugin
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/render_chain.rst
@@ -0,0 +1,9 @@
+:mod:`RenderChain`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.render_chain
+   
+.. autoclass:: RenderChain
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/renderer.rst
@@ -0,0 +1,9 @@
+:mod:`Renderer`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.renderer
+   
+.. autoclass:: Renderer
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/review_controller.rst
@@ -0,0 +1,9 @@
+:mod:`ReviewController`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.review_controller
+   
+.. autoclass:: ReviewController
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/scheduler.rst
@@ -0,0 +1,9 @@
+:mod:`Scheduler`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.scheduler
+   
+.. autoclass:: Scheduler
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/statistics_page.rst
@@ -0,0 +1,16 @@
+:mod:`StatisticsPage`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.statistics_page
+   
+.. autoclass:: StatisticsPage
+   :members:
+   :undoc-members:   
+
+.. autoclass:: PlotStatisticsPage
+   :members:
+   :undoc-members:
+
+.. autoclass:: HtmlStatisticsPage
+   :members:
+   :undoc-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/stopwatch.rst
@@ -0,0 +1,9 @@
+:mod:`Stopwatch`
+===============================
+
+.. automodule:: mnemosyne.libmnemosyne.stopwatch
+   
+.. autoclass:: Stopwatch
+   :members:
+   :undoc-members:   
+
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/tag.rst
@@ -0,0 +1,9 @@
+:mod:`Tag`
+==========
+
+.. automodule:: mnemosyne.libmnemosyne.tag
+   
+.. autoclass:: Tag
+   :members:
+   :undoc-members:   
+   :inherited-members:
--- /dev/null
+++ mnemosyne-2.4/mnemosyne/libmnemosyne/docs/source/modules/tag_tree.rst
@@ -0,0 +1,8 @@
+:mod:`TagTree`
+==============
+
+.. automodule:: mnemosyne.libmnemosyne.tag_tree
+   
+.. autoclass:: TagTree
+   :members:
+   :undoc-members:   
